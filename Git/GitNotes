What is Git?
Git is a popular version control system.

It is used for:
---------------
Tracking code changes
Tracking who made changes
Coding collaboration


What does Git do?

Manage projects with Repositories
Clone a project to work on a local copy
Control and track changes with Staging and Committing
Branch and Merge to allow for work on different parts and versions of a project
Pull the latest version of the project to a local copy
Push local updates to the main project

Working with Git
-----------------
Initialize Git on a folder, making it a Repository
Git now creates a hidden folder to keep track of changes in that folder
When a file is changed, added or deleted, it is considered modified
You select the modified files you want to Stage
The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
Git allows you to see the full history of every commit.
You can revert back to any previous commit.
Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!


Why Git?

Over 70% of developers use Git!
Developers can work together from anywhere in the world.
Developers can see the full history of the project.
Developers can revert to earlier versions of a project.

What is GitHub?

Git is not the same as GitHub.
GitHub makes tools that use Git.
GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.
In this tutorial, we will focus on using Git with GitHub.

Installing/Configure Git on Linux​
---------------------------------
Yum install git –y​

git –version​

Configure Git​

git config --global user.name "subham singha"​

git config --global user.email "singhaofficials@gmail.com"​

Please note, we are using global to set the username and e-mail for every repository on your computer.If you want to set the username/e-mail for just the current repo, you can remove global​

​
Working with Git
-----------------
Create Git Folder
Initialize Git
Add new files to the folder


Create New Git Files
--------------------

Now Git is aware of the file, but has not added it to our repository!

Files in your Git repository folder can be in one of 2 states:

Tracked - files that Git knows about and are added to the repository
Untracked - files that are in your working directory, but not added to the repository


When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.


Git Staging Environment
------------------------
One of the core functions of Git is the concepts of the Staging Environment, and the Commit.

As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment.

Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.

git add <filename>
git status

git add command more than one file-> git add --all

Git Commit
-------------
We are ready move from stage to commit for our repo.
When we commit, we should always include a message.

git commit -m "First commit"

Git Commit Log
---------------
To view the history of commits for a repository, you can use the log command.

git log

Git Branch
-----------
To check for working branch -> git branch
To checkout/switch to another branch -> git checkout master
To create new branch ->  git checkout -b emergency-fix

===========================
GitHub Concepts
===========================

Create a github account​
Create Repository in git​
Push Local Repository in github​
git remote add origin https://github.com/subhamsingha/<reponame>.git​
git push -u origin master​

Note:- git remote add origin URL specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo.​

Git Pull
-------

When working as a team on a project, it is important that everyone stays up to date.
Any time you start working on a project, you should get the most recent changes to your local copy.
With Git, you can do that with pull.
pull is a combination of 2 different commands:

fetch
merge

Git Fetch
---------
fetch gets all the change history of a tracked branch/repo.So, on your local Git, fetch updates to see what has changed on GitHub

git fetch origin

Git Merge
---------
merge combines the current branch, with a specified branch.
We have confirmed that the updates are as expected, and we can merge our current branch (master) with origin/master

git merge origin/master

Git Pull
--------
But what if you just want to update your local repository, without going through all those steps?
pull is a combination of fetch and merge. It is used to pull all changes from a remote repository into the branch you are working on.

git pull origin


GitHub Fork
-----------
A fork is a copy of a repository. This is useful when you want to contribute to someone else's project or start your own project based on theirs.
fork is not a command in Git, but something offered in GitHub.


Git Revert
----------
revert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.

git commit -m "Just a regular update, definitely no accidents here..."


Git Revert Find Commit in Log
First thing, we need to find the point we want to return to. To do that, we need to go through the log.

To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:

The first seven characters of the commit hash
the commit message

git log --oneline

We want to revert to the previous commit.....

Git Revert HEAD
--------------
We revert the latest commit using git revert HEAD (revert the latest change,  and then commit), adding the option --no-edit to skip the commit message editor (getting the default revert message)

git log --oneline
git revert HEAD --no-edit

Note: To revert to earlier commits, use git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)
Note: You can think of the HEAD as the "current branch". When you switch branches with git checkout, the HEAD revision changes to point to the tip of the new branch.


Git Reset
----------
reset is the command we use when we want to move the repository back to a previous commit, discarding any changes made after that commit.

First thing, we need to find the point we want to return to. To do that, we need to go through the log.

git log --oneline

We reset our repository back to the specific commit using git reset commithash (commithash being the first 7 characters of the commit hash we found in the log)

git reset <commitid>
git log --oneline

================================GIT ADVANCED CONCEPT=================================

Git Ignore
-----------
When sharing your code with others, there are often files or parts of your project, you do not want to share.

Examples

log files
temporary files
hidden files
personal files
etc.
Git can specify which files or parts of your project should be ignored by Git using a .gitignore file.

Git will not track files and folders specified in .gitignore. However, the .gitignore file itself IS tracked by Git.


Git Security
=============
Up to this point, we have used HTTPS to connect to our remote repository.

HTTPS will usually work just fine, but you should use SSH if you work with unsecured networks. And sometimes, a project will require that you use SSH.


What is SSH ?

SSH is a secure shell network protocol that is used for network management, remote file transfer, and remote system access.
SSH uses a pair of SSH keys to establish an authenticated and encrypted secure network protocol. It allows for secure remote communication on unsecured open networks.

SSH keys are used to initiate a secure "handshake". When generating a set of keys, you will generate a "public" and "private" key.
The "public" key is the one you share with the remote party. Think of this more as the lock.
The "private" key is the one you keep for yourself in a secure place. Think of this as the key to the lock.
SSH keys are generated through a security algorithm. It is all very complicated, but it uses prime numbers, and large random numbers to make the public and private key.

It is created so that the public key can be derived from the private key, but not the other way around.

Generating an SSH Key Pair
--------------------------
ssh-keygen -t rsa -b 4096

GitHub Add SSH
--------------
Copy the SSH Public Key whatever you generated

Go to GitHub, navigate to the top left corner, click your profile, and select: Settings

Then select "SSH and GPG keys". and click the "New SSH key" button

Select a title, and paste the public SSH key into the "Key" field, and click "Add SSH Key"
You will be prompted to supply your GitHub password.

Now we can test our connection via SSH to GitHub
ssh -T git@github.com

Add New GitHub SSH Remote
-------------------------
Now we can add a new remote via SSH to our Git.
git remote add ssh-origin <ssh url from github>

Note: You can change a remote origin from HTTPS to SSH with the command: git remote set-url remote-name git@github.com:username/repository.git
